use serde::de::DeserializeOwned;
use serde::Serialize;
use serde_json::Value;


pub fn json_to_vec<T>(json_str: &str, _marker: T) -> Vec<T>
    where
        T: DeserializeOwned + std::fmt::Debug,
{
    serde_json::from_str(json_str).unwrap()
}

pub fn struct_to_map<T, M>(item: &T, _marker: M) -> M
where
    T: Serialize,
    M: Default + Extend<(String, String)>,
{
    let json_value: Value = serde_json::to_value(item).unwrap();
    let mut map =  M::default();

    if let Value::Object(obj) = json_value {
        let pairs = obj.into_iter().map(|(key, value)| {
            // 将 JSON 值转换为字符串
            let value_str = match value {
                Value::String(s) => s,
                Value::Number(n) => n.to_string(),
                Value::Bool(b) => b.to_string(),
                _ => value.to_string(),
            };
            (key, value_str)
        });
        map.extend(pairs);
    }

    map
}

#[cfg(test)]
mod tests {
    use std::collections::BTreeMap;
    use std::collections::HashMap;
    use super::*;

    #[derive(Serialize, Debug)]
    struct TestStruct {
        name: String,
        age: i32,
    }

    #[test]
    fn test_struct_to_hashmap() {
        let test_struct = TestStruct {
            name: "test".to_string(),
            age: 18,
        };

        let hash_kv_pairs = struct_to_map(&test_struct, HashMap::new());

        assert_eq!(hash_kv_pairs.len(), 2);
        assert_eq!(hash_kv_pairs.get("name").unwrap(), "test");

        let btree_kv_pairs = struct_to_map(&test_struct, BTreeMap::new());
        assert_eq!(btree_kv_pairs.len(), 2);
    }

    #[test]
    fn test_json_to_vectors() {
        let json_str_string = r#"["test1", "test2"]"#;
        // let vec_str = json_to_vec_string(json_str);
        let vec_str_string = json_to_vec(json_str_string, String::new());

        assert_eq!(vec_str_string.len(), 2);
        assert_eq!(vec_str_string[0], "test1");
        assert_eq!(vec_str_string[1], "test2");

        let json_str_int = r#"[1, 2]"#;
        let vec_str_int = json_to_vec(json_str_int, 0i32);
        assert_eq!(vec_str_int.len(), 2);
        assert_eq!(vec_str_int[0], 1);
        assert_eq!(vec_str_int[1], 2);
    }
}
