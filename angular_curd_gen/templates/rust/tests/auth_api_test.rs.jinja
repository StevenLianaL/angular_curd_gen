use axum::{
    http::StatusCode,
};
use http_body_util::BodyExt;
use serde_json::{json, Value};
use {{ lower_app_name }}::utils::test::post_response;


#[tokio::test]
async fn test_login() {
    let token = "".to_string();
    let json = json!(
        {
            "username": "test",
            "password": "123",
        });
    let response = post_response("/auth/login", json.to_string(), token.clone()).await;
    assert_eq!(response.status(), StatusCode::OK);

    // user not found
    let json = json!(
        {
            "username": "test1",
            "password": "1233",
        }
    );
    let response = post_response("/auth/login", json.to_string(), token.clone()).await;
    let body = response.into_body().collect().await.unwrap().to_bytes();
    let body: Value = serde_json::from_slice(&body).unwrap();
    assert_eq!(body, json!({ "detail": "User test1 not found" }));


    // password error
    let json = json!(
        {
            "username": "test",
            "password": "1233",
        }
    );
    let response = post_response("/auth/login", json.to_string(), token.clone()).await;
    let body = response.into_body().collect().await.unwrap().to_bytes();
    let body: Value = serde_json::from_slice(&body).unwrap();
    assert_eq!(body, json!({ "detail": "密码错误" }));
}
