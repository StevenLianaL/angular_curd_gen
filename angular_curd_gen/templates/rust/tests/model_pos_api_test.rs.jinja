use axum::{
    http::StatusCode,
};
use http_body_util::BodyExt;
use {{ lower_app_name }}::auth::utils::JwtManager;
use {{ lower_app_name }}::utils::test::{delete_response, get_response, post_response, put_response};


#[tokio::test]
async fn test_get_{{ lower_models_name }}() {
    let token = JwtManager::gen_token(1);
    let response = get_response("/{{ lower_app_name }}/{{ lower_models_name }}", "".to_string(), token).await;
    assert_eq!(response.status(), StatusCode::OK);
    let body = response.into_body().collect().await.unwrap().to_bytes();
    assert!(!body.is_empty());
}


#[tokio::test]
async fn test_create_{{ lower_model_name }}() {
    let token = JwtManager::gen_token(1);
    let json = serde_json::json!(
        {
            {% for form_field,type in model_create_fields_type_map.items() -%}
            {% set py_type=cls.extract_py_type(type) -%}
            {% if py_type in ["int","float"] -%}
                "{{ form_field }}": 1,
            {% elif py_type=='bool' -%}
                "{{ form_field }}": true,
            {% else -%}
                "{{ form_field }}": format!("test_{}", chrono::Local::now().timestamp()),
            {% endif %}
    {%- endfor -%}
    }
    );
    let response = post_response("/{{ lower_app_name }}/{{ lower_models_name }}", json.to_string(), token.clone()).await;
    assert_eq!(response.status(), StatusCode::CREATED);
}

#[tokio::test]
async fn test_get_{{ lower_model_name }}() {
    let token = JwtManager::gen_token(1);
    let response = get_response("/{{ lower_app_name }}/{{ lower_models_name }}/{{ db_first_id }}", "".to_string(), token).await;
    assert_eq!(response.status(), StatusCode::OK);
}

#[tokio::test]
async fn test_update_{{ lower_model_name }}() {
    let token = JwtManager::gen_token(1);
    let json = serde_json::json!(
        {
            {% for form_field,type in model_edit_fields_type_map.items() -%}
            {% set py_type=cls.extract_py_type(type) -%}
            {% if py_type in ["int","float"] -%}
                "{{ form_field }}": 1,
            {% elif py_type=='bool' -%}
                "{{ form_field }}": true,
            {% else -%}
                "{{ form_field }}": format!("test_{}", chrono::Local::now().timestamp()),
            {% endif %}
    {%- endfor -%}
    }
    );
    let response = put_response("/{{ lower_app_name }}/{{ lower_models_name }}/{{ db_first_id }}", json.to_string(), token.clone()).await;
    assert_eq!(response.status(), StatusCode::OK);
}

#[tokio::test]
async fn test_delete_{{ lower_model_name }}() {
    let token = JwtManager::gen_token(1);
    let response = delete_response("/{{ lower_app_name }}/{{ lower_models_name }}/{{ db_last_id }}", "".to_string(), token).await;
    assert_eq!(response.status(), StatusCode::NO_CONTENT);
}