use std::net::SocketAddr;
use std::sync::Arc;
use axum::{routing::get, Router, middleware};
use bb8_redis::{bb8, RedisConnectionManager};
use listenfd::ListenFd;
use mongodb::Client as MongoClient;
use sea_orm::{ConnectOptions, Database};
use tokio::net::TcpListener;
use tower_http::cors::{Any, CorsLayer};
use tokio::sync::{Notify};

use tower_http::timeout::TimeoutLayer;
#[cfg(unix)]
use tokio::signal::unix::{signal, SignalKind};
use tokio::task;


pub mod entities;
pub mod routers;
pub mod utils;
pub mod modules;
mod config;

use crate::config::{DATABASE_URL, MONGO_URL, REDIS_URL, SETTINGS};

use utils::state;

pub async fn build_state() -> state::AppState {
    let mut opt = ConnectOptions::new(DATABASE_URL.to_owned());
    opt.max_connections(100)
        .min_connections(5)
        .connect_timeout(std::time::Duration::from_secs(10))
        .idle_timeout(std::time::Duration::from_secs(10))
        .max_lifetime(std::time::Duration::from_secs(10))
        .sqlx_logging(true);

    let conn = Database::connect(opt).await.unwrap();

    let redis_manager = RedisConnectionManager::new(REDIS_URL.as_str()).unwrap();
    let redis_pool = bb8::Pool::builder().build(redis_manager).await.unwrap();

    let mongo_client = MongoClient::with_uri_str(MONGO_URL.as_str()).await.expect("failed to connect");
    state::AppState {
        conn: Arc::new(conn),
        redis: redis_pool,
        mongo: Arc::new(mongo_client),
    }
}

pub async fn create_app() -> Router {
    println!("{:?}", SETTINGS.db);
    println!("{:?}", SETTINGS.mongo);
    println!("{:?}", SETTINGS.redis);

    let state = build_state().await;

    let auth_routers_with_state = routers::auth::auth_routes().with_state(state.clone());
    let {{ lower_model_name }}_routers_with_state = routers::{{ lower_model_name }}::{{ lower_model_name }}_routes().with_state(state.clone());
    let demo_routers_with_state = routers::demo::demo_routes().with_state(state.clone());
    let app = Router::new()
        .route("/", get(|| async { "Hello, W1111!" }))
        .nest("/auth", auth_routers_with_state)
        .nest("/{{ app_name }}", {{ lower_model_name }}_routers_with_state)
        .nest("/demo", demo_routers_with_state)
        .route_layer(middleware::from_fn_with_state(state.clone(), utils::middlewares::jwt_auth))
        .route_layer(middleware::from_fn_with_state(state.clone(), utils::middlewares::log_req_access_times))
        .layer((
            TimeoutLayer::new(std::time::Duration::from_secs(10)),
            CorsLayer::new()
                .allow_origin(Any)
                .allow_methods(Any)
                .allow_headers(Any)
                .allow_credentials(false)
        )).with_state(state);
    app
}

pub async fn run_app(notify: Arc<Notify>) {
    loop {
        let mut listenfd = ListenFd::from_env();
        let addr = SocketAddr::from(([0, 0, 0, 0], config::SETTINGS.port));

        let app = create_app().await;
        let listener = match listenfd.take_tcp_listener(0).unwrap() {
            Some(listener) => {
                listener.set_nonblocking(true).unwrap();
                TcpListener::from_std(listener).unwrap()
            }
            None => TcpListener::bind(addr).await.unwrap(),
        };
        axum::serve(listener, app).await.unwrap();
        tokio::select! {
            _ = notify.notified() => {
                break;
            },
        }
    }
}

pub async fn reload_app() {
    let notify = Arc::new(Notify::new());
    let notify_clone = notify.clone();
    task::spawn(async move {
        run_app(notify_clone).await;
    });

    #[cfg(unix)]
    {
        let notify_clone = notify.clone();
        task::spawn(async move {
            let mut sighup = signal(SignalKind::hangup()).unwrap();
            while let Some(_) = sighup.recv().await {
                notify_clone.notify_waiters();
            }
        });
    }

    loop {
        tokio::time::sleep(std::time::Duration::from_secs(60)).await;
    }
}