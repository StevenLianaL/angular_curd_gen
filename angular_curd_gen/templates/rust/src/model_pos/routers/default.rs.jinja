{% set single_left = '{' -%}
use axum::extract::{Path, Query, State};
use axum::{Extension, Json, Router};
use axum::http::StatusCode;
use axum::response::{IntoResponse, Response};
use axum::routing::{get};
use sea_orm::{ActiveModelTrait, ColumnTrait, EntityTrait, ModelTrait, QueryFilter};
use sea_orm::ActiveValue::Set;
use utoipa::OpenApi;
use crate::{{ lower_model_name }}::models;
use crate::{{ lower_model_name }}::tables::{{ single_left }}{{ model_name }}, {{ lower_model_name }}};
use crate::info;
use crate::utils::state;

#[derive(OpenApi)]
#[openapi(
    paths(get_{{ lower_models_name }}, get_{{ lower_model_name }}, create_{{ lower_model_name }}, update_{{ lower_model_name }}, delete_{{ lower_model_name }}),
    components(schemas({{ lower_model_name }}::Model, models::{{ model_name }}Creatable, models::{{ model_name }}Editable))
)]
pub struct {{ model_name }}Api;

pub fn {{ lower_model_name }}_routes() -> Router<state::AppState> {
    Router::new()
        .route("/{{ lower_models_name }}", get(get_{{ lower_models_name }}).post(create_{{ lower_model_name }}))
        .route("/{{ lower_models_name }}/{{ single_left }}{{ lower_model_name }}_id}", get(get_{{ lower_model_name }}).put(update_{{ lower_model_name }}).delete(delete_{{ lower_model_name }}))
}

#[utoipa::path(
    get,
    path = "/{{ lower_models_name }}",
    params(
        models::{{ model_name }}Filter,
        ("jwt" = String, Header, description = "jwt token"),
    ),
    responses(
        (status = 200, description = "查询{{ model_name }}列表", body = [{{ lower_model_name }}::Model]),
    )
)]
async fn get_{{ lower_models_name }}(state: State<state::AppState>, Extension(user_id): Extension<i64>, Query(filter): Query<models::{{ model_name }}Filter>) -> Response {
    info!(&format!("filter: {filter:?}"), user_id, state.clone());

    let mut query = {{ model_name }}::find();

    {% for filter_field,filter_field_type in list_filter_fields_type_map.items() -%}
    {%- if cls.extract_py_type(filter_field_type)=='str' -%}
        {% set condition = "contains" -%}
    {% else -%}
        {% set condition = "eq" -%}
    {% endif -%}
    if let Some({{ filter_field }}) = filter.{{ filter_field }} {
        query = query.filter({{ lower_model_name }}::Column::{{ filter_field | to_camel }}.{{ condition }}({{ filter_field }}));
    }
    {% endfor %}
    let {{ lower_models_name }} = query.all(&*state.conn).await.unwrap();
    (StatusCode::OK, Json({{ lower_models_name }})).into_response()
}

#[utoipa::path(
    get,
    path = "/{{ lower_models_name }}/{{ single_left }}{{ lower_model_name }}_id}",
    responses(
        (status = 200, description = "查询{{ model_name }}成功"),
    ),
    params(
        ("{{ lower_model_name }}_id" = i64, Path, description = "{{ model_name }} id"),
        ("jwt" = String, Header, description = "jwt token"),
    ),
)]
async fn get_{{ lower_model_name }}(state: State<state::AppState>, Extension(user_id): Extension<i64>, Path({{ lower_model_name }}_id): Path<i64>) -> Response {
    info!(&format!("{{ lower_model_name }}_id: {{ single_left }}{{ lower_model_name }}_id}"), user_id, state.clone());

    let {{ lower_model_name }}: {{ lower_model_name }}::Model = {{ model_name }}::find_by_id({{ lower_model_name }}_id).one(&*state.conn).await.unwrap().unwrap();
    (StatusCode::OK, Json({{ lower_model_name }})).into_response()
}

#[utoipa::path(
    post,
    path = "/{{ lower_models_name }}",
    request_body = models::{{ model_name }}Creatable,
    params(
        ("jwt" = String, Header, description = "jwt token"),
    ),
    responses(
    (status = 201, description = "创建{{ model_name }}成功", body = {{ lower_model_name }}::Model),
    )
)]
async fn create_{{ lower_model_name }}(state: State<state::AppState>, Extension(user_id): Extension<i64>, Json(payload): Json<models::{{ model_name }}Creatable>) -> Response {
    info!(&format!("payload: {payload:?}"), user_id, state.clone());

    let new_{{ lower_model_name }} = {{ lower_model_name }}::ActiveModel {
    {%- for field,field_type in model_create_fields_type_map.items() %}
        {{ field }}: Set(payload.{{ field }}.to_owned()),
    {%- endfor %}
        ..Default::default()
    };
    let {{ lower_model_name }} = new_{{ lower_model_name }}.insert(&*state.conn).await.unwrap();
    (StatusCode::CREATED, Json({{ lower_model_name }})).into_response()
}

#[utoipa::path(
    put,
    path = "/{{ lower_models_name }}/{{ single_left }}{{ lower_model_name }}_id}",
    request_body = models::{{ model_name }}Editable,
    params(
        ("{{ lower_model_name }}_id" = i64, Path, description = "{{ model_name }} id"),
        ("jwt" = String, Header, description = "jwt token"),
    ),
    responses(
    (status = 200, description = "更新{{ model_name }}成功", body = {{ lower_model_name }}::Model),
    ),
)]
async fn update_{{ lower_model_name }}(state: State<state::AppState>, Extension(user_id): Extension<i64>, Path({{ lower_model_name }}_id): Path<i64>, Json(payload): Json<models::{{ model_name }}Editable>) -> impl IntoResponse {
    info!(&format!("{{ lower_model_name }}_id: {{ single_left }}{{ lower_model_name }}_id}, payload: {payload:?}"), user_id, state.clone());

    let raw_{{ lower_model_name }}: {{ lower_model_name }}::Model = {{ model_name }}::find_by_id({{ lower_model_name }}_id).one(&*state.conn).await.unwrap().unwrap();
    let mut {{ lower_model_name }}: {{ lower_model_name }}::ActiveModel = raw_{{ lower_model_name }}.into();
    {%- for field,field_type in model_edit_fields_type_map.items() %}
    {{ lower_model_name }}.{{ field }} = Set(payload.{{ field }}.to_owned());
    {%- endfor %}
    let updated_{{ lower_model_name }}: {{ lower_model_name }}::Model = {{ lower_model_name }}.update(&*state.conn).await.unwrap();
    (StatusCode::OK, Json(updated_{{ lower_model_name }})).into_response()
}

#[utoipa::path(
    delete,
    path = "/{{ lower_models_name }}/{{ single_left }}{{ lower_model_name }}_id}",
    params(
        ("{{ lower_model_name }}_id" = i64, Path, description = "{{ model_name }} id"),
        ("jwt" = String, Header, description = "jwt token"),
    ),
    responses(
        (status = 204, description = "delete success"),
    ),
)]
async fn delete_{{ lower_model_name }}(state: State<state::AppState>, Extension(user_id): Extension<i64>, Path({{ lower_model_name }}_id): Path<i64>) -> impl IntoResponse {
    info!(&format!("{{ lower_model_name }}_id: {{ single_left }}{{ lower_model_name }}_id}"), user_id, state.clone());

    let {{ lower_model_name }} = {{ model_name }}::find_by_id({{ lower_model_name }}_id).one(&*state.conn).await.unwrap();
    if let Some({{ lower_model_name }}) = {{ lower_model_name }} {
        {{ lower_model_name }}.delete(&*state.conn).await.unwrap();
    };
    StatusCode::NO_CONTENT.into_response()
}