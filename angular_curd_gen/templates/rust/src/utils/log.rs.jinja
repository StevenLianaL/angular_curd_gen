use axum::extract::State;
use crate::config::SETTINGS;
use crate::{entities};
use crate::utils::state;

pub struct MongoLogger {
    pub project: String,
    pub app: String,
}

impl MongoLogger {
    pub fn new(project: &str, app: &str) -> Self {
        Self {
            project: project.to_string(),
            app: app.to_string(),
        }
    }

    pub async fn log(&self, state: State<state::AppState>, func: &str, log: &str, user: i64, level: &str) {
        let mongo = state.mongo.lock().await;
        let db = mongo.database(SETTINGS.mongo.name.as_str());
        let collection = db.collection("log_record");
        let payload = entities::demo::NewLogRecord {
            app: self.app.clone(),
            func: func.to_string(),
            log: log.to_string(),
            project: self.project.clone(),
            user,
            level: level.to_string(),
            created: bson::DateTime::now(),
        };
        collection.insert_one(payload).await.unwrap();
    }

    pub async fn info(&self, state: State<state::AppState>, func: &str, log: &str, user: i64) {
        self.log(state, func, log, user, "info").await
    }

    pub async fn warning(&self, state: State<state::AppState>, func: &str, log: &str, user: i64) {
        self.log(state, func, log, user, "warning").await
    }

    pub async fn error(&self, state: State<state::AppState>, func: &str, log: &str, user: i64) {
        self.log(state, func, log, user, "error").await
    }

    pub async fn debug(&self, state: State<state::AppState>, func: &str, log: &str, user: i64) {
        self.log(state, func, log, user, "debug").await
    }
}